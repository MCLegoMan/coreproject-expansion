plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17
archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group
repositories {
	maven {
		url = 'https://maven.minecraftforge.net/'
	}
	maven {
		url = 'https://jitpack.io/'
	}
}
dependencies {	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation include("com.github.mclegoman:legolib:${project.legolib_version}")
	modImplementation include("com.github.mclegoman:coreproject:${project.coreproject_version}")
	modImplementation "com.github.glitchfiend:TerraBlender-fabric:${project.terrablender_version}"
	implementation include("org.json:json:20220924")

}
processResources {
	inputs.property "version", project.version
	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}
def dataOutput = 'src/main/generated'

loom {
	runs {
		datagen {
			server()

			name "Fabric DataGen"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file(dataOutput)}"

			runDir "build/datagen"
		}
	}
}

sourceSets { main { resources { srcDirs += dataOutput } } }

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}
java {
	withSourcesJar()
}
jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}
	repositories {
	}
}